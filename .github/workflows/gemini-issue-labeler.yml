name: Gemini Issue Labeler

on:
  issues:
    types: [opened, edited]

jobs:
  label-issue:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get issue data
        id: issue_data
        run: |
          echo "title=${{ github.event.issue.title }}" >> $GITHUB_OUTPUT
          echo "number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          # EOF marker is used to correctly handle multiline strings
          echo 'body<<EOF' >> $GITHUB_OUTPUT
          echo "${{ github.event.issue.body }}" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
        
      - name: Get available labels
        id: get_labels
        run: |
          # These labels are examples. You can get them from the repo if you have a file for them.
          echo "labels=bug,feature,documentation,question,enhancement,help wanted" >> $GITHUB_OUTPUT

      - name: Call Gemini to suggest labels
        id: gemini_call
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          ISSUE_TITLE: ${{ steps.issue_data.outputs.title }}
          ISSUE_BODY: ${{ steps.issue_data.outputs.body }}
        run: |
          JSON_PAYLOAD=$(jq -n --arg title "$ISSUE_TITLE" --arg body "$ISSUE_BODY" --arg labels "${{ steps.get_labels.outputs.labels }}" 
            '{ "contents": [{ "parts": [{ "text": "Read the following GitHub issue and suggest up to 3 relevant labels from the available list. Only return a comma-separated list of the most appropriate labels. Do not add any other text or explanation.\n\nAvailable Labels: \($labels)\n\nIssue Title: \($title)\n\nIssue Body: \n\($body)" }]}]}')

          API_RESPONSE=$(curl -s -H "Content-Type: application/json" -d "$JSON_PAYLOAD" 
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=$GEMINI_API_KEY")

          SUGGESTED_LABELS=$(echo "$API_RESPONSE" | jq -r '.candidates[0].content.parts[0].text' | tr -d '\n' | xargs)
          
          echo "suggested_labels=$SUGGESTED_LABELS" >> $GITHUB_ENV

      - name: Add labels to the issue with gh CLI
        if: steps.gemini_call.outputs.suggested_labels != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          ISSUE_NUMBER: ${{ steps.issue_data.outputs.number }}
        run: |
          gh issue edit $ISSUE_NUMBER --add-label "${{ steps.gemini_call.outputs.suggested_labels }}"
